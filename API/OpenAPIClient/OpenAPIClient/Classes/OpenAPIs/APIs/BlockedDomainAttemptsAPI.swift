//
// BlockedDomainAttemptsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BlockedDomainAttemptsAPI {

    /**
     Create Blocked Domain Attempt
     
     - parameter blockedDomainAttemptCreate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func blockedDomainAttemptsCreateBlockedDomainAttempt(blockedDomainAttemptCreate: BlockedDomainAttemptCreate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlockedDomainAttemptPublic?, _ error: Error?) -> Void)) -> RequestTask {
        return blockedDomainAttemptsCreateBlockedDomainAttemptWithRequestBuilder(blockedDomainAttemptCreate: blockedDomainAttemptCreate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Blocked Domain Attempt
     - POST /api/v1/blocked-domain-attempts/
     - Create a new blocked domain attempt.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter blockedDomainAttemptCreate: (body)  
     - returns: RequestBuilder<BlockedDomainAttemptPublic> 
     */
    open class func blockedDomainAttemptsCreateBlockedDomainAttemptWithRequestBuilder(blockedDomainAttemptCreate: BlockedDomainAttemptCreate) -> RequestBuilder<BlockedDomainAttemptPublic> {
        let localVariablePath = "/api/v1/blocked-domain-attempts/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: blockedDomainAttemptCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockedDomainAttemptPublic>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Blocked Domain Attempt
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func blockedDomainAttemptsDeleteBlockedDomainAttempt(id: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlockedDomainAttemptPublic?, _ error: Error?) -> Void)) -> RequestTask {
        return blockedDomainAttemptsDeleteBlockedDomainAttemptWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Blocked Domain Attempt
     - DELETE /api/v1/blocked-domain-attempts/{id}
     - Delete a blocked domain attempt.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter id: (path)  
     - returns: RequestBuilder<BlockedDomainAttemptPublic> 
     */
    open class func blockedDomainAttemptsDeleteBlockedDomainAttemptWithRequestBuilder(id: UUID) -> RequestBuilder<BlockedDomainAttemptPublic> {
        var localVariablePath = "/api/v1/blocked-domain-attempts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockedDomainAttemptPublic>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Read Blocked Domain Attempt
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func blockedDomainAttemptsReadBlockedDomainAttempt(id: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlockedDomainAttemptPublic?, _ error: Error?) -> Void)) -> RequestTask {
        return blockedDomainAttemptsReadBlockedDomainAttemptWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Read Blocked Domain Attempt
     - GET /api/v1/blocked-domain-attempts/{id}
     - Get blocked domain attempt by ID.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter id: (path)  
     - returns: RequestBuilder<BlockedDomainAttemptPublic> 
     */
    open class func blockedDomainAttemptsReadBlockedDomainAttemptWithRequestBuilder(id: UUID) -> RequestBuilder<BlockedDomainAttemptPublic> {
        var localVariablePath = "/api/v1/blocked-domain-attempts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockedDomainAttemptPublic>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Read Blocked Domain Attempts
     
     - parameter skip: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func blockedDomainAttemptsReadBlockedDomainAttempts(skip: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlockedDomainAttemptsPublic?, _ error: Error?) -> Void)) -> RequestTask {
        return blockedDomainAttemptsReadBlockedDomainAttemptsWithRequestBuilder(skip: skip, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Read Blocked Domain Attempts
     - GET /api/v1/blocked-domain-attempts/
     - Retrieve blocked domain attempts.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter skip: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - returns: RequestBuilder<BlockedDomainAttemptsPublic> 
     */
    open class func blockedDomainAttemptsReadBlockedDomainAttemptsWithRequestBuilder(skip: Int? = nil, limit: Int? = nil) -> RequestBuilder<BlockedDomainAttemptsPublic> {
        let localVariablePath = "/api/v1/blocked-domain-attempts/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockedDomainAttemptsPublic>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
