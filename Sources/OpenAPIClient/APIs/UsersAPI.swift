//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class UsersAPI {

    /**
     Create User
     
     - parameter userRegister: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersCreateUser(userRegister: UserRegister, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPublic {
        return try await usersCreateUserWithRequestBuilder(userRegister: userRegister, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create User
     - POST /api/v1/users/
     - Create new user (admin only).
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter userRegister: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPublic> 
     */
    open class func usersCreateUserWithRequestBuilder(userRegister: UserRegister, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<UserPublic> {
        let localVariablePath = "/api/v1/users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userRegister, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete User
     
     - parameter userId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Message
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersDeleteUser(userId: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> Message {
        return try await usersDeleteUserWithRequestBuilder(userId: userId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete User
     - DELETE /api/v1/users/{user_id}
     - Delete a user.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter userId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Message> 
     */
    open class func usersDeleteUserWithRequestBuilder(userId: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Message> {
        var localVariablePath = "/api/v1/users/{user_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Message>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete User Me
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Message
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersDeleteUserMe(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> Message {
        return try await usersDeleteUserMeWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete User Me
     - DELETE /api/v1/users/me
     - Delete own user.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Message> 
     */
    open class func usersDeleteUserMeWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Message> {
        let localVariablePath = "/api/v1/users/me"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Message>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Read Stripe Customer
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: StripeCustomer
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersReadStripeCustomer(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> StripeCustomer {
        return try await usersReadStripeCustomerWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Read Stripe Customer
     - GET /api/v1/users/stripe
     - Get user's Stripe account.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<StripeCustomer> 
     */
    open class func usersReadStripeCustomerWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<StripeCustomer> {
        let localVariablePath = "/api/v1/users/stripe"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StripeCustomer>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Read User By Id
     
     - parameter userId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersReadUserById(userId: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPublic {
        return try await usersReadUserByIdWithRequestBuilder(userId: userId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Read User By Id
     - GET /api/v1/users/{user_id}
     - Get a specific user by id.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter userId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPublic> 
     */
    open class func usersReadUserByIdWithRequestBuilder(userId: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<UserPublic> {
        var localVariablePath = "/api/v1/users/{user_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Read User Me
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersReadUserMe(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPublic {
        return try await usersReadUserMeWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Read User Me
     - GET /api/v1/users/me
     - Get current user.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPublic> 
     */
    open class func usersReadUserMeWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<UserPublic> {
        let localVariablePath = "/api/v1/users/me"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Read User With All Data
     
     - parameter userId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersReadUserWithAllData(userId: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> JSONValue {
        return try await usersReadUserWithAllDataWithRequestBuilder(userId: userId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Read User With All Data
     - GET /api/v1/users/{user_id}/all_data
     - Get all data attached to a specific user by id (including related entities).
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter userId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func usersReadUserWithAllDataWithRequestBuilder(userId: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<JSONValue> {
        var localVariablePath = "/api/v1/users/{user_id}/all_data"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Read Users
     
     - parameter skip: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UsersPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersReadUsers(skip: Int? = nil, limit: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> UsersPublic {
        return try await usersReadUsersWithRequestBuilder(skip: skip, limit: limit, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Read Users
     - GET /api/v1/users/
     - Retrieve users.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter skip: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UsersPublic> 
     */
    open class func usersReadUsersWithRequestBuilder(skip: Int? = nil, limit: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<UsersPublic> {
        let localVariablePath = "/api/v1/users/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Register User
     
     - parameter userRegister: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersRegisterUser(userRegister: UserRegister, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPublic {
        return try await usersRegisterUserWithRequestBuilder(userRegister: userRegister, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Register User
     - POST /api/v1/users/signup
     - Register a new user (Supabase sends verification email).
     - parameter userRegister: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPublic> 
     */
    open class func usersRegisterUserWithRequestBuilder(userRegister: UserRegister, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<UserPublic> {
        let localVariablePath = "/api/v1/users/signup"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userRegister, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Update User
     
     - parameter userId: (path)  
     - parameter userUpdate: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersUpdateUser(userId: UUID, userUpdate: UserUpdate, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPublic {
        return try await usersUpdateUserWithRequestBuilder(userId: userId, userUpdate: userUpdate, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update User
     - PATCH /api/v1/users/{user_id}
     - Update a user.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter userId: (path)  
     - parameter userUpdate: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPublic> 
     */
    open class func usersUpdateUserWithRequestBuilder(userId: UUID, userUpdate: UserUpdate, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<UserPublic> {
        var localVariablePath = "/api/v1/users/{user_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userUpdate, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update User Me
     
     - parameter userUpdateMe: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersUpdateUserMe(userUpdateMe: UserUpdateMe, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPublic {
        return try await usersUpdateUserMeWithRequestBuilder(userUpdateMe: userUpdateMe, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update User Me
     - PATCH /api/v1/users/me
     - Update own user.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter userUpdateMe: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPublic> 
     */
    open class func usersUpdateUserMeWithRequestBuilder(userUpdateMe: UserUpdateMe, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<UserPublic> {
        let localVariablePath = "/api/v1/users/me"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userUpdateMe, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
