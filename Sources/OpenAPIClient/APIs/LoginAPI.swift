//
// LoginAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class LoginAPI {

    /**
     Login Access Token
     
     - parameter username: (form)  
     - parameter password: (form)  
     - parameter grantType: (form)  (optional)
     - parameter scope: (form)  (optional, default to "")
     - parameter clientId: (form)  (optional)
     - parameter clientSecret: (form)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Token
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginLoginAccessToken(username: String, password: String, grantType: String? = nil, scope: String? = nil, clientId: String? = nil, clientSecret: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> Token {
        return try await loginLoginAccessTokenWithRequestBuilder(username: username, password: password, grantType: grantType, scope: scope, clientId: clientId, clientSecret: clientSecret, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Login Access Token
     - POST /api/v1/login/access-token
     - OAuth2 compatible token login, get an access token for future requests
     - parameter username: (form)  
     - parameter password: (form)  
     - parameter grantType: (form)  (optional)
     - parameter scope: (form)  (optional, default to "")
     - parameter clientId: (form)  (optional)
     - parameter clientSecret: (form)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Token> 
     */
    open class func loginLoginAccessTokenWithRequestBuilder(username: String, password: String, grantType: String? = nil, scope: String? = nil, clientId: String? = nil, clientSecret: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Token> {
        let localVariablePath = "/api/v1/login/access-token"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "grant_type": grantType?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "username": username.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "password": password.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "scope": scope?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "client_id": clientId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
            "client_secret": clientSecret?.encodeToJSON(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Token>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Refresh Token
     
     - parameter refreshToken: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Token
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginRefreshToken(refreshToken: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> Token {
        return try await loginRefreshTokenWithRequestBuilder(refreshToken: refreshToken, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Refresh Token
     - POST /api/v1/login/refresh-token
     - Refresh an access token using a refresh token
     - parameter refreshToken: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Token> 
     */
    open class func loginRefreshTokenWithRequestBuilder(refreshToken: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Token> {
        let localVariablePath = "/api/v1/login/refresh-token"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "refresh_token": (wrappedValue: refreshToken.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Token>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Test Token
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginTestToken(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPublic {
        return try await loginTestTokenWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Test Token
     - POST /api/v1/login/test-token
     - Test access token
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPublic> 
     */
    open class func loginTestTokenWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<UserPublic> {
        let localVariablePath = "/api/v1/login/test-token"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
