//
// HabitsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class HabitsAPI {

    /**
     Create Habit
     
     - parameter habitCreate: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: HabitPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func habitsCreateHabit(habitCreate: HabitCreate, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> HabitPublic {
        return try await habitsCreateHabitWithRequestBuilder(habitCreate: habitCreate, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create Habit
     - POST /api/v1/habits/
     - Create new habit.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter habitCreate: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<HabitPublic> 
     */
    open class func habitsCreateHabitWithRequestBuilder(habitCreate: HabitCreate, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<HabitPublic> {
        let localVariablePath = "/api/v1/habits/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: habitCreate, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HabitPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete Habit
     
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: HabitPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func habitsDeleteHabit(id: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> HabitPublic {
        return try await habitsDeleteHabitWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete Habit
     - DELETE /api/v1/habits/{id}
     - Delete a Habit.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<HabitPublic> 
     */
    open class func habitsDeleteHabitWithRequestBuilder(id: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<HabitPublic> {
        var localVariablePath = "/api/v1/habits/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HabitPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Read Habit
     
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: HabitPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func habitsReadHabit(id: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> HabitPublic {
        return try await habitsReadHabitWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Read Habit
     - GET /api/v1/habits/{id}
     - Get habit by ID.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<HabitPublic> 
     */
    open class func habitsReadHabitWithRequestBuilder(id: UUID, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<HabitPublic> {
        var localVariablePath = "/api/v1/habits/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HabitPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Read Habits
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: HabitsPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func habitsReadHabits(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> HabitsPublic {
        return try await habitsReadHabitsWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Read Habits
     - GET /api/v1/habits/
     - Retrieve habits.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<HabitsPublic> 
     */
    open class func habitsReadHabitsWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<HabitsPublic> {
        let localVariablePath = "/api/v1/habits/"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HabitsPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update Habit
     
     - parameter id: (path)  
     - parameter habitUpdate: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: HabitPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func habitsUpdateHabit(id: UUID, habitUpdate: HabitUpdate, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> HabitPublic {
        return try await habitsUpdateHabitWithRequestBuilder(id: id, habitUpdate: habitUpdate, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update Habit
     - PUT /api/v1/habits/{id}
     - Update a habit.
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter id: (path)  
     - parameter habitUpdate: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<HabitPublic> 
     */
    open class func habitsUpdateHabitWithRequestBuilder(id: UUID, habitUpdate: HabitUpdate, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<HabitPublic> {
        var localVariablePath = "/api/v1/habits/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: habitUpdate, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HabitPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
