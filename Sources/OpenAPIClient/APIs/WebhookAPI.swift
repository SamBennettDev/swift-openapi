//
// WebhookAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class WebhookAPI {

    /**
     Get User From Customer
     
     - parameter customerId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func webhookGetUserFromCustomer(customerId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPublic {
        return try await webhookGetUserFromCustomerWithRequestBuilder(customerId: customerId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get User From Customer
     - GET /api/v1/webhook/customer/{customer_id}
     - API Key:
       - type: apiKey Apollo-Webhook-API-Key (HEADER)
       - name: Webhook_API_Key
     - parameter customerId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPublic> 
     */
    open class func webhookGetUserFromCustomerWithRequestBuilder(customerId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<UserPublic> {
        var localVariablePath = "/api/v1/webhook/customer/{customer_id}"
        let customerIdPreEscape = "\(APIHelper.mapValueToPathItem(customerId))"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update User Subscription
     
     - parameter userId: (path)  
     - parameter updateSubscription: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UserPublic
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func webhookUpdateUserSubscription(userId: UUID, updateSubscription: UpdateSubscription, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> UserPublic {
        return try await webhookUpdateUserSubscriptionWithRequestBuilder(userId: userId, updateSubscription: updateSubscription, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update User Subscription
     - PATCH /api/v1/webhook/subscription/{user_id}
     - API Key:
       - type: apiKey Apollo-Webhook-API-Key (HEADER)
       - name: Webhook_API_Key
     - parameter userId: (path)  
     - parameter updateSubscription: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UserPublic> 
     */
    open class func webhookUpdateUserSubscriptionWithRequestBuilder(userId: UUID, updateSubscription: UpdateSubscription, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<UserPublic> {
        var localVariablePath = "/api/v1/webhook/subscription/{user_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateSubscription, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublic>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
