//
// StripeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class StripeAPI {

    /**
     Create Checkout Session Embedded
     
     - parameter priceId: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CheckoutSessionEmbedded
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stripeCreateCheckoutSessionEmbedded(priceId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CheckoutSessionEmbedded {
        return try await stripeCreateCheckoutSessionEmbeddedWithRequestBuilder(priceId: priceId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create Checkout Session Embedded
     - POST /api/v1/stripe/checkout_session_embedded
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter priceId: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CheckoutSessionEmbedded> 
     */
    open class func stripeCreateCheckoutSessionEmbeddedWithRequestBuilder(priceId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CheckoutSessionEmbedded> {
        let localVariablePath = "/api/v1/stripe/checkout_session_embedded"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "price_id": (wrappedValue: priceId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckoutSessionEmbedded>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create Checkout Session Redirect
     
     - parameter priceId: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CheckoutSessionRedirect
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stripeCreateCheckoutSessionRedirect(priceId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CheckoutSessionRedirect {
        return try await stripeCreateCheckoutSessionRedirectWithRequestBuilder(priceId: priceId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create Checkout Session Redirect
     - POST /api/v1/stripe/checkout_session_redirect
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter priceId: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CheckoutSessionRedirect> 
     */
    open class func stripeCreateCheckoutSessionRedirectWithRequestBuilder(priceId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CheckoutSessionRedirect> {
        let localVariablePath = "/api/v1/stripe/checkout_session_redirect"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "price_id": (wrappedValue: priceId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckoutSessionRedirect>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create Customer Portal
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CustomerPortal
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func stripeCreateCustomerPortal(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CustomerPortal {
        return try await stripeCreateCustomerPortalWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create Customer Portal
     - POST /api/v1/stripe/customer_portal
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CustomerPortal> 
     */
    open class func stripeCreateCustomerPortalWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CustomerPortal> {
        let localVariablePath = "/api/v1/stripe/customer_portal"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerPortal>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
