//
// UserPublic.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserPublic: Codable, JSONEncodable, Hashable {

    public var email: String
    public var isActive: Bool? = true
    public var isSuperuser: Bool? = false
    public var fullName: String?
    public var createdAt: Date?
    public var id: UUID
    public var stripeCustomerId: String?
    public var stripeSubscriptionId: String?
    public var stripeProductId: String?
    public var planName: String?
    public var subscriptionStatus: String?

    public init(email: String, isActive: Bool? = true, isSuperuser: Bool? = false, fullName: String? = nil, createdAt: Date? = nil, id: UUID, stripeCustomerId: String? = nil, stripeSubscriptionId: String? = nil, stripeProductId: String? = nil, planName: String? = nil, subscriptionStatus: String? = nil) {
        self.email = email
        self.isActive = isActive
        self.isSuperuser = isSuperuser
        self.fullName = fullName
        self.createdAt = createdAt
        self.id = id
        self.stripeCustomerId = stripeCustomerId
        self.stripeSubscriptionId = stripeSubscriptionId
        self.stripeProductId = stripeProductId
        self.planName = planName
        self.subscriptionStatus = subscriptionStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case isActive = "is_active"
        case isSuperuser = "is_superuser"
        case fullName = "full_name"
        case createdAt = "created_at"
        case id
        case stripeCustomerId = "stripe_customer_id"
        case stripeSubscriptionId = "stripe_subscription_id"
        case stripeProductId = "stripe_product_id"
        case planName = "plan_name"
        case subscriptionStatus = "subscription_status"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(isSuperuser, forKey: .isSuperuser)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(stripeCustomerId, forKey: .stripeCustomerId)
        try container.encodeIfPresent(stripeSubscriptionId, forKey: .stripeSubscriptionId)
        try container.encodeIfPresent(stripeProductId, forKey: .stripeProductId)
        try container.encodeIfPresent(planName, forKey: .planName)
        try container.encodeIfPresent(subscriptionStatus, forKey: .subscriptionStatus)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension UserPublic: Identifiable {}
