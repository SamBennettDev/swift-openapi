//
// StripeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class StripeAPI {

    /**
     Create Checkout Session Embedded
     
     - parameter priceId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stripeCreateCheckoutSessionEmbedded(priceId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CheckoutSessionEmbedded?, _ error: Error?) -> Void)) -> RequestTask {
        return stripeCreateCheckoutSessionEmbeddedWithRequestBuilder(priceId: priceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Checkout Session Embedded
     - POST /api/v1/stripe/checkout_session_embedded
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter priceId: (query)  
     - returns: RequestBuilder<CheckoutSessionEmbedded> 
     */
    open class func stripeCreateCheckoutSessionEmbeddedWithRequestBuilder(priceId: String) -> RequestBuilder<CheckoutSessionEmbedded> {
        let localVariablePath = "/api/v1/stripe/checkout_session_embedded"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "price_id": (wrappedValue: priceId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckoutSessionEmbedded>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Checkout Session Redirect
     
     - parameter priceId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stripeCreateCheckoutSessionRedirect(priceId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CheckoutSessionRedirect?, _ error: Error?) -> Void)) -> RequestTask {
        return stripeCreateCheckoutSessionRedirectWithRequestBuilder(priceId: priceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Checkout Session Redirect
     - POST /api/v1/stripe/checkout_session_redirect
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - parameter priceId: (query)  
     - returns: RequestBuilder<CheckoutSessionRedirect> 
     */
    open class func stripeCreateCheckoutSessionRedirectWithRequestBuilder(priceId: String) -> RequestBuilder<CheckoutSessionRedirect> {
        let localVariablePath = "/api/v1/stripe/checkout_session_redirect"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "price_id": (wrappedValue: priceId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckoutSessionRedirect>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Customer Portal
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func stripeCreateCustomerPortal(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomerPortal?, _ error: Error?) -> Void)) -> RequestTask {
        return stripeCreateCustomerPortalWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Customer Portal
     - POST /api/v1/stripe/customer_portal
     - OAuth:
       - type: oauth2
       - name: OAuth2PasswordBearer
     - returns: RequestBuilder<CustomerPortal> 
     */
    open class func stripeCreateCustomerPortalWithRequestBuilder() -> RequestBuilder<CustomerPortal> {
        let localVariablePath = "/api/v1/stripe/customer_portal"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerPortal>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
