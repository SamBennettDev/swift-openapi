//
// WebhookAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WebhookAPI {

    /**
     Get User From Customer
     
     - parameter customerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func webhookGetUserFromCustomer(customerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserPublic?, _ error: Error?) -> Void)) -> RequestTask {
        return webhookGetUserFromCustomerWithRequestBuilder(customerId: customerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get User From Customer
     - GET /api/v1/webhook/customer/{customer_id}
     - API Key:
       - type: apiKey Apollo-Webhook-API-Key (HEADER)
       - name: Webhook_API_Key
     - parameter customerId: (path)  
     - returns: RequestBuilder<UserPublic> 
     */
    open class func webhookGetUserFromCustomerWithRequestBuilder(customerId: String) -> RequestBuilder<UserPublic> {
        var localVariablePath = "/api/v1/webhook/customer/{customer_id}"
        let customerIdPreEscape = "\(APIHelper.mapValueToPathItem(customerId))"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublic>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update User Subscription
     
     - parameter userId: (path)  
     - parameter updateSubscription: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func webhookUpdateUserSubscription(userId: UUID, updateSubscription: UpdateSubscription, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserPublic?, _ error: Error?) -> Void)) -> RequestTask {
        return webhookUpdateUserSubscriptionWithRequestBuilder(userId: userId, updateSubscription: updateSubscription).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update User Subscription
     - PATCH /api/v1/webhook/subscription/{user_id}
     - API Key:
       - type: apiKey Apollo-Webhook-API-Key (HEADER)
       - name: Webhook_API_Key
     - parameter userId: (path)  
     - parameter updateSubscription: (body)  
     - returns: RequestBuilder<UserPublic> 
     */
    open class func webhookUpdateUserSubscriptionWithRequestBuilder(userId: UUID, updateSubscription: UpdateSubscription) -> RequestBuilder<UserPublic> {
        var localVariablePath = "/api/v1/webhook/subscription/{user_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateSubscription)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublic>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
